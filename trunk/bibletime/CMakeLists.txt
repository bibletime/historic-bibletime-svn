PROJECT(bibletime CXX C)
CMAKE_MINIMUM_REQUIRED(VERSION 2.4.0)

#Version
SET(BT_VERSION "1.7.alpha")
#Specify which languages are to be installed for UI messages
LIST(APPEND INSTALL_LOCALE_LANGS af bg cs da de en_GB es et fi fr hu it ko nl nn_NO no pl pt_br ro ru sk ua zh_CN zh_TW)

######################################################
# Find required packages
#
FIND_PACKAGE(Qt4 REQUIRED)
SET(QT_DBUSXML2CPP_EXECUTABLE "/usr/bin/qdbusxml2cpp") #TEMP HACK
FIND_PACKAGE(KDE4 REQUIRED)
FIND_PACKAGE(Boost REQUIRED)
#
#custom includes
#
SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
FIND_PACKAGE(CLucene REQUIRED)
FIND_PACKAGE(Sword REQUIRED)
######################################################


######################################################
# Define $bibletime_SOURCES
#
INCLUDE("${CMAKE_CURRENT_SOURCE_DIR}/cmake/bibletime_source_list.cmake")
######################################################


######################################################
# Generate config.h
SET(CONFIG_H_NEW_CONTENT "\#define BT_VERSION \"${BT_VERSION}\" //This file is autogenerated by CMake, do not edit.")
# Check if the existing config.h needs to be replaced
IF(EXISTS "${CMAKE_CURRENT_BINARY_DIR}/config.h")
	FILE(READ ${CMAKE_CURRENT_BINARY_DIR}/config.h CONFIG_H_CONTENT)
ENDIF(EXISTS "${CMAKE_CURRENT_BINARY_DIR}/config.h")
#
IF ("${CONFIG_H_NEW_CONTENT}" STREQUAL "${CONFIG_H_CONTENT}")
	MESSAGE(STATUS "config.h is already up to date.")
ELSE ("${CONFIG_H_NEW_CONTENT}" STREQUAL "${CONFIG_H_CONTENT}")
	MESSAGE(STATUS "writing new config.h.")
	FILE(WRITE "${CMAKE_CURRENT_BINARY_DIR}/config.h" "${CONFIG_H_NEW_CONTENT}")
ENDIF ("${CONFIG_H_NEW_CONTENT}" STREQUAL "${CONFIG_H_CONTENT}")
######################################################


######################################################
# The actual build options
#
INCLUDE_DIRECTORIES(
	${QT_INCLUDE_DIR}
	${QT_QTCORE_INCLUDE_DIR}
	${QT_QTGUI_INCLUDE_DIR}
	${QT_QTXML_INCLUDE_DIR}
	${KDE4_INCLUDE_DIR}
	${CLUCENE_INCLUDE_DIR}			#CLucene headers
	${CLUCENE_LIBRARY_DIR}			#CLucene/clucene-config.h
	${Boost_INCLUDE_DIRS}
	${SWORD_INCLUDE_DIR}
	${CMAKE_CURRENT_BINARY_DIR}		#for .h files generated from .ui
	${CMAKE_CURRENT_SOURCE_DIR}/src	# so that include paths like "frontend/..." work
)
#
#This must come before the target definition!
LINK_DIRECTORIES(
	${KDE4_LIB_DIR}
	${QT_LIBRARY_DIR}
	${CLUCENE_LIBRARY_DIR}
)
#
KDE4_ADD_EXECUTABLE(bibletime ${bibletime_SOURCES})
#
IF(MODE STREQUAL "RELEASE")
	MESSAGE(STATUS "Building in release mode")
	IF (NOT CMAKE_INSTALL_PREFIX)
		SET(CMAKE_INSTALL_PREFIX /usr/local/)
	ENDIF (NOT CMAKE_INSTALL_PREFIX)
	SET_TARGET_PROPERTIES(bibletime
		PROPERTIES 
			COMPILE_FLAGS "-w -fexceptions -O2"
	)
ELSE(MODE STREQUAL "RELEASE")
	MESSAGE(STATUS "Building in debug mode")
	SET(CMAKE_INSTALL_PREFIX install) #install to ./build/install
	SET_TARGET_PROPERTIES(bibletime
		PROPERTIES 
			COMPILE_FLAGS "-w -fexceptions -O0 -g" #Enable exception handling, debug code and no optimization
	)
ENDIF(MODE STREQUAL "RELEASE")
#
TARGET_LINK_LIBRARIES(bibletime
	${KDE4_KDEUI_LIBS}
	${KDE4_KDECORE_LIBS}
	${KDE4_KHTML_LIBS}
	QtCore
	QtGui
	QtXml
	${CLUCENE_LIBRARY}
	${SWORD_LIBRARY}
)
######################################################


######################################################
# Install files
#
# main binary
INSTALL(TARGETS "bibletime" DESTINATION "bin/")
# catalogs
FOREACH(_INSTALL_LOCALE_LANG ${INSTALL_LOCALE_LANGS})
	ADD_CUSTOM_TARGET("compile_messages_${_INSTALL_LOCALE_LANG}" ALL
		COMMAND lrelease "${CMAKE_CURRENT_SOURCE_DIR}/i18n/messages/${_INSTALL_LOCALE_LANG}.ts" -qm "${CMAKE_CURRENT_BINARY_DIR}/${_INSTALL_LOCALE_LANG}.qm")
	INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/${_INSTALL_LOCALE_LANG}.qm"
		DESTINATION "share/bibletime/locale/")
ENDFOREACH(_INSTALL_LOCALE_LANG)
# icons
FILE(GLOB BT_INSTALL_ICONS_LIST ${CMAKE_CURRENT_SOURCE_DIR}/pics/icons/*.svg)
INSTALL(FILES ${BT_INSTALL_ICONS_LIST} DESTINATION "share/bibletime/icons/")
# display templates
FILE(GLOB BT_INSTALL_DISPLAY_TEMPLATES_LIST ${CMAKE_CURRENT_SOURCE_DIR}/src/display-templates/*.tmpl)
INSTALL(FILES ${BT_INSTALL_DISPLAY_TEMPLATES_LIST} DESTINATION "share/bibletime/display-templates/")
# splash screen
INSTALL(FILES "pics/startuplogo.png" DESTINATION "share/bibletime/pics/")
######################################################


######################################################
# Update source catalog files (this is the basis for the translator's work)
# Invoke this with "make messages"
#
ADD_CUSTOM_TARGET(messages)
FOREACH(_INSTALL_LOCALE_LANG ${INSTALL_LOCALE_LANGS})
	ADD_CUSTOM_TARGET("messages_${_INSTALL_LOCALE_LANG}"
		COMMAND lupdate "${CMAKE_CURRENT_SOURCE_DIR}/src" -ts "${CMAKE_CURRENT_SOURCE_DIR}/i18n/messages/${_INSTALL_LOCALE_LANG}.ts")
	ADD_DEPENDENCIES(messages "messages_${_INSTALL_LOCALE_LANG}")
ENDFOREACH(_INSTALL_LOCALE_LANG)
######################################################


######################################################
# "make uninstall" target; see http://www.cmake.org/Wiki/CMake_FAQ#Can_I_do_.22make_uninstall.22_with_CMake.3F
#
CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
  IMMEDIATE @ONLY
 )
ADD_CUSTOM_TARGET(uninstall "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
######################################################
